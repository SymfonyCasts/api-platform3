diff --git a/src/Entity/User.php b/src/Entity/User.php
index dba11b9..b0bf769 100644
--- a/src/Entity/User.php
+++ b/src/Entity/User.php
@@ -2,71 +2,14 @@
 
 namespace App\Entity;
 
-use ApiPlatform\Metadata\ApiFilter;
-use ApiPlatform\Metadata\ApiResource;
-use ApiPlatform\Metadata\Delete;
-use ApiPlatform\Metadata\Get;
-use ApiPlatform\Metadata\GetCollection;
-use ApiPlatform\Metadata\Link;
-use ApiPlatform\Metadata\Patch;
-use ApiPlatform\Metadata\Post;
-use ApiPlatform\Metadata\Put;
-use ApiPlatform\Serializer\Filter\PropertyFilter;
 use App\Repository\UserRepository;
-use App\Validator\TreasuresAllowedOwnerChange;
 use Doctrine\Common\Collections\ArrayCollection;
 use Doctrine\Common\Collections\Collection;
 use Doctrine\ORM\Mapping as ORM;
 use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
 use Symfony\Component\Security\Core\User\UserInterface;
-use Symfony\Component\Serializer\Annotation\Groups;
-use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
-use Symfony\Component\Serializer\Annotation\SerializedName;
-use Symfony\Component\Validator\Constraints as Assert;
 #[ORM\Entity(repositoryClass: UserRepository::class)]
 #[ORM\Table(name: '`user`')]
-#[ApiResource(
-    // Now add `operations` set to the 6 normal operations
-    operations: [
-        new Get(),
-        new GetCollection(),
-        new Post(
-            security: 'is_granted("PUBLIC_ACCESS")',
-            validationContext: ['groups' => ['Default', 'postValidation']],
-        ),
-        new Put(
-            security: 'is_granted("ROLE_USER_EDIT")'
-        ),
-        new Patch(
-            security: 'is_granted("ROLE_USER_EDIT")'
-        ),
-        new Delete(),
-    ],
-    normalizationContext: ['groups' => ['user:read']],
-    denormalizationContext: ['groups' => ['user:write']],
-    security: 'is_granted("ROLE_USER")',
-    extraProperties: [
-        'standard_put' => true,
-    ],
-)]
-#[ApiResource(
-    uriTemplate: '/treasures/{treasure_id}/owner.{_format}',
-    operations: [new Get()],
-    uriVariables: [
-        'treasure_id' => new Link(
-            fromProperty: 'owner',
-            fromClass: DragonTreasure::class,
-        ),
-    ],
-    normalizationContext: ['groups' => ['user:read']],
-    security: 'is_granted("ROLE_USER")',
-    extraProperties: [
-        'standard_put' => true,
-    ],
-)]
-#[ApiFilter(PropertyFilter::class)]
-#[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]
-#[UniqueEntity(fields: ['username'], message: 'It looks like another dragon took your username. ROAR!')]
 class User implements UserInterface, PasswordAuthenticatedUserInterface
 {
     #[ORM\Id]
@@ -75,9 +18,6 @@ class User implements UserInterface, PasswordAuthenticatedUserInterface
     private ?int $id = null;
 
     #[ORM\Column(length: 180, unique: true)]
-    #[Groups(['user:read', 'user:write'])]
-    #[Assert\NotBlank]
-    #[Assert\Email]
     private ?string $email = null;
 
     #[ORM\Column]
@@ -92,20 +32,12 @@ class User implements UserInterface, PasswordAuthenticatedUserInterface
     #[ORM\Column]
     private ?string $password = null;
 
-    #[Groups(['user:write'])]
-    #[SerializedName('password')]
-    #[Assert\NotBlank(groups: ['postValidation'])]
     private ?string $plainPassword = null;
 
     #[ORM\Column(length: 255, unique: true)]
-    #[Groups(['user:read', 'user:write', 'treasure:item:get', 'treasure:write'])]
-    #[Assert\NotBlank]
     private ?string $username = null;
 
     #[ORM\OneToMany(mappedBy: 'owner', targetEntity: DragonTreasure::class, cascade: ['persist'], orphanRemoval: true)]
-    #[Groups(['user:write'])]
-    #[Assert\Valid]
-    #[TreasuresAllowedOwnerChange]
     private Collection $dragonTreasures;
 
     #[ORM\OneToMany(mappedBy: 'ownedBy', targetEntity: ApiToken::class)]
@@ -214,8 +146,6 @@ class User implements UserInterface, PasswordAuthenticatedUserInterface
         return $this->dragonTreasures;
     }
 
-    #[Groups(['user:read'])]
-    #[SerializedName('dragonTreasures')]
     public function getPublishedDragonTreasures(): Collection
     {
         return $this->dragonTreasures->filter(static function (DragonTreasure $treasure) {
