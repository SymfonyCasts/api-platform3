diff --git a/src/Mapper/UserApiToEntityMapper.php b/src/Mapper/UserApiToEntityMapper.php
index bf1474a..0b68682 100644
--- a/src/Mapper/UserApiToEntityMapper.php
+++ b/src/Mapper/UserApiToEntityMapper.php
@@ -3,11 +3,13 @@
 namespace App\Mapper;
 
 use App\ApiResource\UserApi;
+use App\Entity\DragonTreasure;
 use App\Entity\User;
 use App\Repository\UserRepository;
 use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
 use Symfonycasts\MicroMapper\AsMapper;
 use Symfonycasts\MicroMapper\MapperInterface;
+use Symfonycasts\MicroMapper\MicroMapperInterface;
 
 #[AsMapper(from: UserApi::class, to: User::class)]
 class UserApiToEntityMapper implements MapperInterface
@@ -15,6 +17,7 @@ class UserApiToEntityMapper implements MapperInterface
     public function __construct(
         private UserRepository $userRepository,
         private UserPasswordHasherInterface $userPasswordHasher,
+        private MicroMapperInterface $microMapper,
     )
     {
     }
@@ -44,8 +47,14 @@ class UserApiToEntityMapper implements MapperInterface
         if ($dto->password) {
             $entity->setPassword($this->userPasswordHasher->hashPassword($entity, $dto->password));
         }
-        dump($dto);
-        // TODO dragonTreasures if we change them to writeable
+
+        $dragonTreasureEntities = [];
+        foreach ($dto->dragonTreasures as $dragonTreasureApi) {
+            $dragonTreasureEntities[] = $this->microMapper->map($dragonTreasureApi, DragonTreasure::class, [
+                MicroMapperInterface::MAX_DEPTH => 0,
+            ]);
+        }
+        dd($dragonTreasureEntities);
 
         return $entity;
     }
