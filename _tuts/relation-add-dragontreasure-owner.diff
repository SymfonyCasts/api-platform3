diff --git a/src/Entity/DragonTreasure.php b/src/Entity/DragonTreasure.php
index 92dca01..8b3e7ab 100644
--- a/src/Entity/DragonTreasure.php
+++ b/src/Entity/DragonTreasure.php
@@ -91,6 +91,10 @@ class DragonTreasure
     #[ApiFilter(BooleanFilter::class)]
     private bool $isPublished = false;
 
+    #[ORM\ManyToOne(inversedBy: 'dragonTreasures')]
+    #[ORM\JoinColumn(nullable: false)]
+    private ?User $owner = null;
+
     public function __construct(string $name = null)
     {
         $this->name = $name;
@@ -190,4 +194,16 @@ class DragonTreasure
 
         return $this;
     }
+
+    public function getOwner(): ?User
+    {
+        return $this->owner;
+    }
+
+    public function setOwner(?User $owner): self
+    {
+        $this->owner = $owner;
+
+        return $this;
+    }
 }
diff --git a/src/Entity/User.php b/src/Entity/User.php
index 2a5ef82..f66b098 100644
--- a/src/Entity/User.php
+++ b/src/Entity/User.php
@@ -4,6 +4,8 @@ namespace App\Entity;
 
 use ApiPlatform\Metadata\ApiResource;
 use App\Repository\UserRepository;
+use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
 use Doctrine\ORM\Mapping as ORM;
 use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
 use Symfony\Component\Security\Core\User\UserInterface;
@@ -46,6 +48,14 @@ class User implements UserInterface, PasswordAuthenticatedUserInterface
     #[Assert\NotBlank]
     private ?string $username = null;
 
+    #[ORM\OneToMany(mappedBy: 'owner', targetEntity: DragonTreasure::class)]
+    private Collection $dragonTreasures;
+
+    public function __construct()
+    {
+        $this->dragonTreasures = new ArrayCollection();
+    }
+
     public function getId(): ?int
     {
         return $this->id;
@@ -127,4 +137,34 @@ class User implements UserInterface, PasswordAuthenticatedUserInterface
 
         return $this;
     }
+
+    /**
+     * @return Collection<int, DragonTreasure>
+     */
+    public function getDragonTreasures(): Collection
+    {
+        return $this->dragonTreasures;
+    }
+
+    public function addDragonTreasure(DragonTreasure $treasure): self
+    {
+        if (!$this->dragonTreasures->contains($treasure)) {
+            $this->dragonTreasures->add($treasure);
+            $treasure->setOwner($this);
+        }
+
+        return $this;
+    }
+
+    public function removeDragonTreasure(DragonTreasure $treasure): self
+    {
+        if ($this->dragonTreasures->removeElement($treasure)) {
+            // set the owning side to null (unless already changed)
+            if ($treasure->getOwner() === $this) {
+                $treasure->setOwner(null);
+            }
+        }
+
+        return $this;
+    }
 }
