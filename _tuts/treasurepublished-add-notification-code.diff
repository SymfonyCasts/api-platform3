diff --git a/src/State/DragonTreasureStateProcessor.php b/src/State/DragonTreasureStateProcessor.php
index fad80d3d..565317f5 100644
--- a/src/State/DragonTreasureStateProcessor.php
+++ b/src/State/DragonTreasureStateProcessor.php
@@ -4,19 +4,40 @@ namespace App\State;
 
 use ApiPlatform\Metadata\Operation;
 use ApiPlatform\State\ProcessorInterface;
+use App\ApiResource\DragonTreasureApi;
+use App\Entity\DragonTreasure;
+use App\Entity\Notification;
+use App\Repository\DragonTreasureRepository;
+use Doctrine\ORM\EntityManagerInterface;
 
 class DragonTreasureStateProcessor implements ProcessorInterface
 {
     public function __construct(
         private EntityClassDtoStateProcessor $innerProcessor,
+        private EntityManagerInterface $entityManager,
+        private DragonTreasureRepository $repository,
     )
     {
     }
 
     public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = [])
     {
-        dd($context['previous_data']);
+        assert($data instanceof DragonTreasureApi);
+        $result = $this->innerProcessor->process($data, $operation, $uriVariables, $context);
 
-        return $this->innerProcessor->process($data, $operation, $uriVariables, $context);
+        $previousData = $context['previous_data'] ?? null;
+        if ($previousData instanceof DragonTreasureApi
+            && $data->isPublished
+            && $previousData->isPublished !== $data->isPublished
+        ) {
+            $entity = $this->repository->find($data->id);
+            $notification = new Notification();
+            $notification->setDragonTreasure($entity);
+            $notification->setMessage('Treasure has been published!');
+            $this->entityManager->persist($notification);
+            $this->entityManager->flush();
+        }
+
+        return $result;
     }
 }
